2019，8.24：
	*导入jl1.0.1.jar,用Player类对象来播放音乐
	*Integer对象，小于128的整数在常量池里有，指的都是同一个数，大于等于128的整数就不是了
	只是值相等
	
	*IDEA本身就提供了GUI,单例模式的java文件的创建
	
	*若一个类的静态资源被多个类继承，那么多个类共用这一个静态资源，因为静态资源只被初始化一次，
	后面就只能更改静态资源了
	
	*放入接口中的变量一定是固定不能改变的，将一个需要被重复赋值的引用或需要改变的声明/变量放在接口中无意义
	
	*String类中的equals()首先比较引用变量所表示的内存地址是否相等，若相等值必定相等，若不相等
	则再比较变量所赋的值是否相同，若值相同则认定字符串相同
	
	**所谓的多线程异步并不是说绝对异步，至少在代码执行到Thread类对象的start()方法之前还是按从上
	往下的顺序执行的，java中的异步可以理解成当在一个线程a下启动了另一个线程b，那么虽然b是a下的一段
	代码，但b不影响他后面的代码【或者另一个线程】的执行，如：【main方法简写了】
	main(){
	    System.out.println("执行完之后才启动后面的两个线程");
        new Thread("Client2"){
            @Override
            public void run() {
                Client2.main(new String[1]);
            }
        }.start();
        new Thread("Client1"){
            @Override
            public void run() {
                System.out.println("开启线程Client1");
                Client1.main(new String[1]);//主线程main()可以直接调用执行
            }
        }.start();

	}
	一定是先执行了输出语句才启动两个线程的这是同步【依次执行】，后面两个线程里的run()可
	看成是异步执行的，即Client2线程即使没执行完，Client2线程里的run()方法也能得到执行，
	只不过在构建线程对象时，还是同步的即先构建Client2线程对象，再构建Client1线程对象
	
	